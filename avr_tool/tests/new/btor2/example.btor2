; http://selfie.cs.uni-salzburg.at

; BTOR2 example.btor2 generated by ./modeler for
; RISC-V code obtained from example.c and
; invoked as example.c

1 sort bitvec 1 ; Boolean
2 sort bitvec 64 ; 64-bit machine word
3 sort array 2 2 ; 64-bit memory

10 zero 1
11 one 1

20 zero 2
21 one 2
22 constd 2 2
23 constd 2 3
24 constd 2 4
25 constd 2 5
26 constd 2 6
27 constd 2 7
28 constd 2 8

; word-aligned end of code segment in memory

30 constd 2 66112 ; 0x10240

; word-aligned end of data segment in memory (initial program break)

31 constd 2 66120 ; 0x10248

; word-aligned initial $sp (stack pointer) value from boot loader

40 constd 2 4294967248 ; 0xFFFFFFD0

; 4GB of memory

50 constd 2 4294967296 ; 0x100000000

; kernel-mode flag

60 state 1 kernel-mode
61 init 1 60 10 kernel-mode ; initial value is false
62 not 1 60

; unsigned-extended inputs for byte-wise reading

71 sort bitvec 8 ; 1 byte
72 sort bitvec 16 ; 2 bytes
73 sort bitvec 24 ; 3 bytes
74 sort bitvec 32 ; 4 bytes
75 sort bitvec 40 ; 5 bytes
76 sort bitvec 48 ; 6 bytes
77 sort bitvec 56 ; 7 bytes

81 input 71 ; 1 byte
82 input 72 ; 2 bytes
83 input 73 ; 3 bytes
84 input 74 ; 4 bytes
85 input 75 ; 5 bytes
86 input 76 ; 6 bytes
87 input 77 ; 7 bytes

91 uext 2 81 56 ; 1 byte
92 uext 2 82 48 ; 2 bytes
93 uext 2 83 40 ; 3 bytes
94 uext 2 84 32 ; 4 bytes
95 uext 2 85 24 ; 5 bytes
96 uext 2 86 16 ; 6 bytes
97 uext 2 87 8 ; 7 bytes
98 input 2 ; 8 bytes

; 32 64-bit general-purpose registers

100 zero 2 zero ; register $0 is always 0
101 state 2 ra ; register $1
102 state 2 sp ; register $2
103 state 2 gp ; register $3
104 state 2 tp ; register $4
105 state 2 t0 ; register $5
106 state 2 t1 ; register $6
107 state 2 t2 ; register $7
108 state 2 s0 ; register $8
109 state 2 s1 ; register $9
110 state 2 a0 ; register $10
111 state 2 a1 ; register $11
112 state 2 a2 ; register $12
113 state 2 a3 ; register $13
114 state 2 a4 ; register $14
115 state 2 a5 ; register $15
116 state 2 a6 ; register $16
117 state 2 a7 ; register $17
118 state 2 s2 ; register $18
119 state 2 s3 ; register $19
120 state 2 s4 ; register $20
121 state 2 s5 ; register $21
122 state 2 s6 ; register $22
123 state 2 s7 ; register $23
124 state 2 s8 ; register $24
125 state 2 s9 ; register $25
126 state 2 s10 ; register $26
127 state 2 s11 ; register $27
128 state 2 t3 ; register $28
129 state 2 t4 ; register $29
130 state 2 t5 ; register $30
131 state 2 t6 ; register $31

; initializing registers

201 init 2 101 20 ra ; initial value is 0
202 init 2 102 40 sp ; initial value from boot loader
203 init 2 103 20 gp ; initial value is 0
204 init 2 104 20 tp ; initial value is 0
205 init 2 105 20 t0 ; initial value is 0
206 init 2 106 20 t1 ; initial value is 0
207 init 2 107 20 t2 ; initial value is 0
208 init 2 108 20 s0 ; initial value is 0
209 init 2 109 20 s1 ; initial value is 0
210 init 2 110 20 a0 ; initial value is 0
211 init 2 111 20 a1 ; initial value is 0
212 init 2 112 20 a2 ; initial value is 0
213 init 2 113 20 a3 ; initial value is 0
214 init 2 114 20 a4 ; initial value is 0
215 init 2 115 20 a5 ; initial value is 0
216 init 2 116 20 a6 ; initial value is 0
217 init 2 117 20 a7 ; initial value is 0
218 init 2 118 20 s2 ; initial value is 0
219 init 2 119 20 s3 ; initial value is 0
220 init 2 120 20 s4 ; initial value is 0
221 init 2 121 20 s5 ; initial value is 0
222 init 2 122 20 s6 ; initial value is 0
223 init 2 123 20 s7 ; initial value is 0
224 init 2 124 20 s8 ; initial value is 0
225 init 2 125 20 s9 ; initial value is 0
226 init 2 126 20 s10 ; initial value is 0
227 init 2 127 20 s11 ; initial value is 0
228 init 2 128 20 t3 ; initial value is 0
229 init 2 129 20 t4 ; initial value is 0
230 init 2 130 20 t5 ; initial value is 0
231 init 2 131 20 t6 ; initial value is 0

; 64-bit program counter encoded in Boolean flags

16553600 state 1
16553601 init 1 16553600 11 ; initial program counter
16554000 state 1
16554001 init 1 16554000 10
16554400 state 1
16554401 init 1 16554400 10
16554800 state 1
16554801 init 1 16554800 10
16555200 state 1
16555201 init 1 16555200 10
16555600 state 1
16555601 init 1 16555600 10
16556000 state 1
16556001 init 1 16556000 10
16556400 state 1
16556401 init 1 16556400 10
16556800 state 1
16556801 init 1 16556800 10
16557200 state 1
16557201 init 1 16557200 10
16557600 state 1
16557601 init 1 16557600 10
16558000 state 1
16558001 init 1 16558000 10
16558400 state 1
16558401 init 1 16558400 10
16558800 state 1
16558801 init 1 16558800 10
16559200 state 1
16559201 init 1 16559200 10
16559600 state 1
16559601 init 1 16559600 10
16560000 state 1
16560001 init 1 16560000 10
16560400 state 1
16560401 init 1 16560400 10
16560800 state 1
16560801 init 1 16560800 10
16561200 state 1
16561201 init 1 16561200 10
16561600 state 1
16561601 init 1 16561600 10
16562000 state 1
16562001 init 1 16562000 10
16562400 state 1
16562401 init 1 16562400 10
16562800 state 1
16562801 init 1 16562800 10
16563200 state 1
16563201 init 1 16563200 10
16563600 state 1
16563601 init 1 16563600 10
16564000 state 1
16564001 init 1 16564000 10
16564400 state 1
16564401 init 1 16564400 10
16564800 state 1
16564801 init 1 16564800 10
16565200 state 1
16565201 init 1 16565200 10
16565600 state 1
16565601 init 1 16565600 10
16566000 state 1
16566001 init 1 16566000 10
16566400 state 1
16566401 init 1 16566400 10
16566800 state 1
16566801 init 1 16566800 10
16567200 state 1
16567201 init 1 16567200 10
16567600 state 1
16567601 init 1 16567600 10
16568000 state 1
16568001 init 1 16568000 10
16568400 state 1
16568401 init 1 16568400 10
16568800 state 1
16568801 init 1 16568800 10
16569200 state 1
16569201 init 1 16569200 10
16569600 state 1
16569601 init 1 16569600 10
16570000 state 1
16570001 init 1 16570000 10
16570400 state 1
16570401 init 1 16570400 10
16570800 state 1
16570801 init 1 16570800 10
16571200 state 1
16571201 init 1 16571200 10
16571600 state 1
16571601 init 1 16571600 10
16572000 state 1
16572001 init 1 16572000 10
16572400 state 1
16572401 init 1 16572400 10
16572800 state 1
16572801 init 1 16572800 10
16573200 state 1
16573201 init 1 16573200 10
16573600 state 1
16573601 init 1 16573600 10
16574000 state 1
16574001 init 1 16574000 10
16574400 state 1
16574401 init 1 16574400 10
16574800 state 1
16574801 init 1 16574800 10
16575200 state 1
16575201 init 1 16575200 10
16575600 state 1
16575601 init 1 16575600 10
16576000 state 1
16576001 init 1 16576000 10
16576400 state 1
16576401 init 1 16576400 10
16576800 state 1
16576801 init 1 16576800 10
16577200 state 1
16577201 init 1 16577200 10
16577600 state 1
16577601 init 1 16577600 10
16578000 state 1
16578001 init 1 16578000 10
16578400 state 1
16578401 init 1 16578400 10
16578800 state 1
16578801 init 1 16578800 10
16579200 state 1
16579201 init 1 16579200 10
16579600 state 1
16579601 init 1 16579600 10
16580000 state 1
16580001 init 1 16580000 10
16580400 state 1
16580401 init 1 16580400 10
16580800 state 1
16580801 init 1 16580800 10
16581200 state 1
16581201 init 1 16581200 10
16581600 state 1
16581601 init 1 16581600 10
16582000 state 1
16582001 init 1 16582000 10
16582400 state 1
16582401 init 1 16582400 10
16582800 state 1
16582801 init 1 16582800 10
16583200 state 1
16583201 init 1 16583200 10
16583600 state 1
16583601 init 1 16583600 10
16584000 state 1
16584001 init 1 16584000 10
16584400 state 1
16584401 init 1 16584400 10
16584800 state 1
16584801 init 1 16584800 10
16585200 state 1
16585201 init 1 16585200 10
16585600 state 1
16585601 init 1 16585600 10
16586000 state 1
16586001 init 1 16586000 10
16586400 state 1
16586401 init 1 16586400 10
16586800 state 1
16586801 init 1 16586800 10
16587200 state 1
16587201 init 1 16587200 10
16587600 state 1
16587601 init 1 16587600 10
16588000 state 1
16588001 init 1 16588000 10
16588400 state 1
16588401 init 1 16588400 10
16588800 state 1
16588801 init 1 16588800 10
16589200 state 1
16589201 init 1 16589200 10
16589600 state 1
16589601 init 1 16589600 10
16590000 state 1
16590001 init 1 16590000 10
16590400 state 1
16590401 init 1 16590400 10
16590800 state 1
16590801 init 1 16590800 10
16591200 state 1
16591201 init 1 16591200 10
16591600 state 1
16591601 init 1 16591600 10
16592000 state 1
16592001 init 1 16592000 10
16592400 state 1
16592401 init 1 16592400 10
16592800 state 1
16592801 init 1 16592800 10
16593200 state 1
16593201 init 1 16593200 10
16593600 state 1
16593601 init 1 16593600 10
16594000 state 1
16594001 init 1 16594000 10
16594400 state 1
16594401 init 1 16594400 10
16594800 state 1
16594801 init 1 16594800 10
16595200 state 1
16595201 init 1 16595200 10
16595600 state 1
16595601 init 1 16595600 10
16596000 state 1
16596001 init 1 16596000 10
16596400 state 1
16596401 init 1 16596400 10
16596800 state 1
16596801 init 1 16596800 10
16597200 state 1
16597201 init 1 16597200 10
16597600 state 1
16597601 init 1 16597600 10
16598000 state 1
16598001 init 1 16598000 10
16598400 state 1
16598401 init 1 16598400 10
16598800 state 1
16598801 init 1 16598800 10
16599200 state 1
16599201 init 1 16599200 10
16599600 state 1
16599601 init 1 16599600 10
16600000 state 1
16600001 init 1 16600000 10
16600400 state 1
16600401 init 1 16600400 10
16600800 state 1
16600801 init 1 16600800 10
16601200 state 1
16601201 init 1 16601200 10
16601600 state 1
16601601 init 1 16601600 10
16602000 state 1
16602001 init 1 16602000 10
16602400 state 1
16602401 init 1 16602400 10
16602800 state 1
16602801 init 1 16602800 10
16603200 state 1
16603201 init 1 16603200 10
16603600 state 1
16603601 init 1 16603600 10
16604000 state 1
16604001 init 1 16604000 10
16604400 state 1
16604401 init 1 16604400 10
16604800 state 1
16604801 init 1 16604800 10
16605200 state 1
16605201 init 1 16605200 10
16605600 state 1
16605601 init 1 16605600 10
16606000 state 1
16606001 init 1 16606000 10
16606400 state 1
16606401 init 1 16606400 10
16606800 state 1
16606801 init 1 16606800 10
16607200 state 1
16607201 init 1 16607200 10
16607600 state 1
16607601 init 1 16607600 10
16608000 state 1
16608001 init 1 16608000 10
16608400 state 1
16608401 init 1 16608400 10
16608800 state 1
16608801 init 1 16608800 10
16609200 state 1
16609201 init 1 16609200 10
16609600 state 1
16609601 init 1 16609600 10
16610000 state 1
16610001 init 1 16610000 10
16610400 state 1
16610401 init 1 16610400 10
16610800 state 1
16610801 init 1 16610800 10

16611200 state 3 boot-loader

; data segment

16611201 constd 2 66112 ; 0x10240
16611202 write 3 16611200 16611201 20

; stack

16611208 constd 2 4294967248 ; 0xFFFFFFD0
16611209 constd 2 1 ; 0x1
16611210 write 3 16611202 16611208 16611209
16611216 constd 2 4294967256 ; 0xFFFFFFD8
16611217 constd 2 4294967280 ; 0xFFFFFFF0
16611218 write 3 16611210 16611216 16611217
16611224 constd 2 4294967264 ; 0xFFFFFFE0
16611225 write 3 16611218 16611224 20
16611232 constd 2 4294967272 ; 0xFFFFFFE8
16611233 write 3 16611225 16611232 20
16611240 constd 2 4294967280 ; 0xFFFFFFF0
16611241 constd 2 3343197528519702629 ; 0x2E656C706D617865
16611242 write 3 16611233 16611240 16611241
16611248 constd 2 4294967288 ; 0xFFFFFFF8
16611249 constd 2 4849251104932560995 ; 0x434C0030002D0063
16611250 write 3 16611242 16611248 16611249

; 64-bit memory

20000000 state 3 memory ; data segment, heap, stack
20000001 init 3 20000000 16611250 ; loading data segment and stack into memory

; data flow

36553600 constd 2 65536 ; 0x10 << 12
36553601 ite 2 16553600 36553600 105 ; 0x10000(~1): lui t0,0x10
36554000 constd 2 584 ; 0x248
36554001 add 2 105 36554000
36554002 ite 2 16554000 36554001 36553601 ; 0x10004(~1): addi t0,t0,584
36554400 ite 2 16554400 105 103 ; 0x10008(~1): addi gp,t0,0
36554800 ite 2 16554800 100 110 ; 0x1000C(~1): addi a0,zero,0
36555200 constd 2 214 ; 0xD6
36555201 ite 2 16555200 36555200 117 ; 0x10010(~1): addi a7,zero,214
36555600 ite 1 16555600 11 10 ; 0x10014(~1): ecall
36556000 constd 2 7 ; 0x7
36556001 add 2 110 36556000
36556002 ite 2 16556000 36556001 36554800 ; 0x10018(~1): addi a0,a0,7
36556400 constd 2 8 ; 0x8
36556401 ite 2 16556400 36556400 36554002 ; 0x1001C(~1): addi t0,zero,8
36556800 ite 2 16556800 105 21 ; record t0 for checking remainder by zero
36556801 urem 2 110 105
36556802 ite 2 16556800 36556801 36556401 ; 0x10020(~1): remu t0,a0,t0
36557200 sub 2 110 105
36557201 ite 2 16557200 36557200 36556002 ; 0x10024(~1): sub a0,a0,t0
36557600 constd 2 214 ; 0xD6
36557601 ite 2 16557600 36557600 36555201 ; 0x10028(~1): addi a7,zero,214
36558000 ite 1 16558000 11 36555600 ; 0x1002C(~1): ecall
36558400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36558401 add 2 103 36558400
36558402 ite 2 16558400 36558401 30
36558403 write 3 20000000 36558401 110
36558404 ite 3 16558400 36558403 20000000 ; 0x10030(~1): sd a0,-8(gp)
36558800 ite 2 16558800 100 36557201 ; 0x10034(~1): addi a0,zero,0
36559200 constd 2 8 ; 0x8
36559201 add 2 102 36559200
36559202 ite 2 16559200 36559201 36556802 ; 0x10038(~1): addi t0,sp,8
36559600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36559601 add 2 102 36559600
36559602 ite 2 16559600 36559601 102 ; 0x1003C(~1): addi sp,sp,-8
36560000 ite 2 16560000 102 36558402
36560001 write 3 20000000 102 105
36560002 ite 3 16560000 36560001 36558404 ; 0x10040(~1): sd t0,0(sp)
36560400 constd 2 65608 ; 0x10048
36560401 ite 2 16560400 36560400 101 ; 0x10044(~1): jal ra,84
36560800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36560801 add 2 102 36560800
36560802 ite 2 16560800 36560801 36559602 ; 0x10048(~1): addi sp,sp,-8
36561200 ite 2 16561200 102 36560000
36561201 write 3 20000000 102 110
36561202 ite 3 16561200 36561201 36560002 ; 0x1004C(~1): sd a0,0(sp)
36561600 ite 2 16561600 102 36561200
36561601 read 2 20000000 102
36561602 ite 2 16561600 36561601 36558800 ; 0x10050(~1): ld a0,0(sp)
36562000 constd 2 8 ; 0x8
36562001 add 2 102 36562000
36562002 ite 2 16562000 36562001 36560802 ; 0x10054(~1): addi sp,sp,8
36562400 constd 2 93 ; 0x5D
36562401 ite 2 16562400 36562400 36557601 ; 0x10058(~1): addi a7,zero,93
36562800 ite 1 16562800 11 36558000 ; 0x1005C(~1): ecall
36563200 ite 2 16563200 102 36561600
36563201 read 2 20000000 102
36563202 ite 2 16563200 36563201 112 ; 0x10060(~1): ld a2,0(sp)
36563600 constd 2 8 ; 0x8
36563601 add 2 102 36563600
36563602 ite 2 16563600 36563601 36562002 ; 0x10064(~1): addi sp,sp,8
36564000 ite 2 16564000 102 36563200
36564001 read 2 20000000 102
36564002 ite 2 16564000 36564001 111 ; 0x10068(~1): ld a1,0(sp)
36564400 constd 2 8 ; 0x8
36564401 add 2 102 36564400
36564402 ite 2 16564400 36564401 36563602 ; 0x1006C(~1): addi sp,sp,8
36564800 ite 2 16564800 102 36564000
36564801 read 2 20000000 102
36564802 ite 2 16564800 36564801 36561602 ; 0x10070(~1): ld a0,0(sp)
36565200 constd 2 8 ; 0x8
36565201 add 2 102 36565200
36565202 ite 2 16565200 36565201 36564402 ; 0x10074(~1): addi sp,sp,8
36565600 constd 2 63 ; 0x3F
36565601 ite 2 16565600 36565600 36562401 ; 0x10078(~1): addi a7,zero,63
36566000 ite 1 16566000 11 36562800 ; 0x1007C(~1): ecall
36566800 ite 2 16566800 102 36564800
36566801 read 2 20000000 102
36566802 ite 2 16566800 36566801 36563202 ; 0x10084(~1): ld a2,0(sp)
36567200 constd 2 8 ; 0x8
36567201 add 2 102 36567200
36567202 ite 2 16567200 36567201 36565202 ; 0x10088(~1): addi sp,sp,8
36567600 ite 2 16567600 102 36566800
36567601 read 2 20000000 102
36567602 ite 2 16567600 36567601 36564002 ; 0x1008C(~1): ld a1,0(sp)
36568000 constd 2 8 ; 0x8
36568001 add 2 102 36568000
36568002 ite 2 16568000 36568001 36567202 ; 0x10090(~1): addi sp,sp,8
36568400 ite 2 16568400 102 36567600
36568401 read 2 20000000 102
36568402 ite 2 16568400 36568401 36564802 ; 0x10094(~1): ld a0,0(sp)
36568800 constd 2 8 ; 0x8
36568801 add 2 102 36568800
36568802 ite 2 16568800 36568801 36568002 ; 0x10098(~1): addi sp,sp,8
36569200 constd 2 64 ; 0x40
36569201 ite 2 16569200 36569200 36565601 ; 0x1009C(~1): addi a7,zero,64
36569600 ite 1 16569600 11 36566000 ; 0x100A0(~1): ecall
36570400 ite 2 16570400 102 36568400
36570401 read 2 20000000 102
36570402 ite 2 16570400 36570401 113 ; 0x100A8(~1): ld a3,0(sp)
36570800 constd 2 8 ; 0x8
36570801 add 2 102 36570800
36570802 ite 2 16570800 36570801 36568802 ; 0x100AC(~1): addi sp,sp,8
36571200 ite 2 16571200 102 36570400
36571201 read 2 20000000 102
36571202 ite 2 16571200 36571201 36566802 ; 0x100B0(~1): ld a2,0(sp)
36571600 constd 2 8 ; 0x8
36571601 add 2 102 36571600
36571602 ite 2 16571600 36571601 36570802 ; 0x100B4(~1): addi sp,sp,8
36572000 ite 2 16572000 102 36571200
36572001 read 2 20000000 102
36572002 ite 2 16572000 36572001 36567602 ; 0x100B8(~1): ld a1,0(sp)
36572400 constd 2 8 ; 0x8
36572401 add 2 102 36572400
36572402 ite 2 16572400 36572401 36571602 ; 0x100BC(~1): addi sp,sp,8
36572800 constd 2 -100 ; 0xFFFFFFFFFFFFFF9C
36572801 ite 2 16572800 36572800 36568402 ; 0x100C0(~1): addi a0,zero,-100
36573200 constd 2 56 ; 0x38
36573201 ite 2 16573200 36573200 36569201 ; 0x100C4(~1): addi a7,zero,56
36573600 ite 1 16573600 11 36569600 ; 0x100C8(~1): ecall
36574400 ite 2 16574400 102 36572000
36574401 read 2 20000000 102
36574402 ite 2 16574400 36574401 36559202 ; 0x100D0(~1): ld t0,0(sp)
36574800 constd 2 8 ; 0x8
36574801 add 2 102 36574800
36574802 ite 2 16574800 36574801 36572402 ; 0x100D4(~1): addi sp,sp,8
36575200 constd 2 7 ; 0x7
36575201 add 2 105 36575200
36575202 ite 2 16575200 36575201 36574402 ; 0x100D8(~1): addi t0,t0,7
36575600 constd 2 8 ; 0x8
36575601 ite 2 16575600 36575600 106 ; 0x100DC(~1): addi t1,zero,8
36576000 ite 2 16576000 106 36556800 ; record t1 for checking remainder by zero
36576001 urem 2 105 106
36576002 ite 2 16576000 36576001 36575601 ; 0x100E0(~1): remu t1,t0,t1
36576400 sub 2 105 106
36576401 ite 2 16576400 36576400 36575202 ; 0x100E4(~1): sub t0,t0,t1
36576800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36576801 add 2 103 36576800
36576802 ite 2 16576800 36576801 36574400
36576803 read 2 20000000 36576801
36576804 ite 2 16576800 36576803 36576002 ; 0x100E8(~1): ld t1,-8(gp)
36577200 add 2 106 105
36577201 ite 2 16577200 36577200 36572801 ; 0x100EC(~1): add a0,t1,t0
36577600 constd 2 214 ; 0xD6
36577601 ite 2 16577600 36577600 36573201 ; 0x100F0(~1): addi a7,zero,214
36578000 ite 1 16578000 11 36573600 ; 0x100F4(~1): ecall
36578400 eq 1 110 106 ; 0x100F8(~1): beq a0,t1,2
36578401 not 1 36578400
36578800 eq 1 100 100 ; 0x100FC(~1): beq zero,zero,4
36578801 not 1 36578800
36579200 eq 1 100 105 ; 0x10100(~1): beq zero,t0,3
36579201 not 1 36579200
36579600 ite 2 16579600 100 36577201 ; 0x10104(~1): addi a0,zero,0
36580000 eq 1 100 100 ; 0x10108(~1): beq zero,zero,3
36580001 not 1 36580000
36580400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36580401 add 2 103 36580400
36580402 ite 2 16580400 36580401 36576802
36580403 write 3 20000000 36580401 110
36580404 ite 3 16580400 36580403 36561202 ; 0x1010C(~1): sd a0,-8(gp)
36580800 ite 2 16580800 106 36579600 ; 0x10110(~1): addi a0,t1,0
36581600 ite 2 16581600 102 36580402
36581601 read 2 20000000 102
36581602 ite 2 16581600 36581601 36572002 ; 0x10118(~1): ld a1,0(sp)
36582000 constd 2 8 ; 0x8
36582001 add 2 102 36582000
36582002 ite 2 16582000 36582001 36574802 ; 0x1011C(~1): addi sp,sp,8
36582400 ite 2 16582400 102 36581600
36582401 read 2 20000000 102
36582402 ite 2 16582400 36582401 36580800 ; 0x10120(~1): ld a0,0(sp)
36582800 constd 2 8 ; 0x8
36582801 add 2 102 36582800
36582802 ite 2 16582800 36582801 36582002 ; 0x10124(~1): addi sp,sp,8
36583200 constd 2 401 ; 0x191
36583201 ite 2 16583200 36583200 36577601 ; 0x10128(~1): addi a7,zero,401
36583600 ite 1 16583600 11 36578000 ; 0x1012C(~1): ecall
36584000 ite 2 16584000 116 36582402 ; 0x10130(~1): addi a0,a6,0
36584800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36584801 add 2 102 36584800
36584802 ite 2 16584800 36584801 36582802 ; 0x10138(~2): addi sp,sp,-8
36585200 ite 2 16585200 102 36582400
36585201 write 3 20000000 102 101
36585202 ite 3 16585200 36585201 36580404 ; 0x1013C(~2): sd ra,0(sp)
36585600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36585601 add 2 102 36585600
36585602 ite 2 16585600 36585601 36584802 ; 0x10140(~2): addi sp,sp,-8
36586000 ite 2 16586000 102 36585200
36586001 write 3 20000000 102 108
36586002 ite 3 16586000 36586001 36585202 ; 0x10144(~2): sd s0,0(sp)
36586400 ite 2 16586400 102 108 ; 0x10148(~2): addi s0,sp,0
36586800 constd 2 16 ; 0x10
36586801 add 2 108 36586800
36586802 ite 2 16586800 36586801 36586000
36586803 read 2 20000000 36586801
36586804 ite 2 16586800 36586803 36576401 ; 0x1014C(~2): ld t0,16(s0)
36587200 ite 2 16587200 100 36576804 ; 0x10150(~2): addi t1,zero,0
36587600 sub 2 106 105
36587601 ite 2 16587600 36587600 36586804 ; 0x10154(~2): sub t0,t1,t0
36588000 constd 2 1 ; 0x1
36588001 ite 2 16588000 36588000 36587200 ; 0x10158(~2): addi t1,zero,1
36588400 ult 1 105 106
36588401 uext 2 36588400 63
36588402 ite 2 16588400 36588401 36587601 ; 0x1015C(~2): sltu t0,t0,t1
36588800 eq 1 105 100 ; 0x10160(~2): beq t0,zero,4
36588801 not 1 36588800
36589200 constd 2 1 ; 0x1
36589201 ite 2 16589200 36589200 36588402 ; 0x10164(~3): addi t0,zero,1
36589600 ite 2 16589600 105 36584000 ; 0x10168(~3): addi a0,t0,0
36590400 ite 2 16590400 100 36589201 ; 0x10170(~5): addi t0,zero,0
36590800 ite 2 16590800 105 36589600 ; 0x10174(~5): addi a0,t0,0
36591600 ite 2 16591600 108 36585602 ; 0x1017C(~8): addi sp,s0,0
36592000 ite 2 16592000 102 36586802
36592001 read 2 20000000 102
36592002 ite 2 16592000 36592001 36586400 ; 0x10180(~8): ld s0,0(sp)
36592400 constd 2 8 ; 0x8
36592401 add 2 102 36592400
36592402 ite 2 16592400 36592401 36591600 ; 0x10184(~8): addi sp,sp,8
36592800 ite 2 16592800 102 36592000
36592801 read 2 20000000 102
36592802 ite 2 16592800 36592801 36560401 ; 0x10188(~8): ld ra,0(sp)
36593200 constd 2 16 ; 0x10
36593201 add 2 102 36593200
36593202 ite 2 16593200 36593201 36592402 ; 0x1018C(~8): addi sp,sp,16
36594000 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36594001 add 2 102 36594000
36594002 ite 2 16594000 36594001 36593202 ; 0x10194(~11): addi sp,sp,-8
36594400 ite 2 16594400 102 36592800
36594401 write 3 20000000 102 101
36594402 ite 3 16594400 36594401 36586002 ; 0x10198(~11): sd ra,0(sp)
36594800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36594801 add 2 102 36594800
36594802 ite 2 16594800 36594801 36594002 ; 0x1019C(~11): addi sp,sp,-8
36595200 ite 2 16595200 102 36594400
36595201 write 3 20000000 102 108
36595202 ite 3 16595200 36595201 36594402 ; 0x101A0(~11): sd s0,0(sp)
36595600 ite 2 16595600 102 36592002 ; 0x101A4(~11): addi s0,sp,0
36596000 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36596001 add 2 102 36596000
36596002 ite 2 16596000 36596001 36594802 ; 0x101A8(~11): addi sp,sp,-8
36596400 constd 2 8 ; 0x8
36596401 ite 2 16596400 36596400 36590400 ; 0x101AC(~11): addi t0,zero,8
36596800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36596801 add 2 102 36596800
36596802 ite 2 16596800 36596801 36596002 ; 0x101B0(~11): addi sp,sp,-8
36597200 ite 2 16597200 102 36595200
36597201 write 3 20000000 102 105
36597202 ite 3 16597200 36597201 36595202 ; 0x101B4(~11): sd t0,0(sp)
36597600 constd 2 65980 ; 0x101BC
36597601 ite 2 16597600 36597600 36592802 ; 0x101B8(~11): jal ra,-58
36598000 ite 2 16598000 110 36596401 ; 0x101BC(~11): addi t0,a0,0
36598400 ite 2 16598400 100 36590800 ; 0x101C0(~11): addi a0,zero,0
36598800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36598801 add 2 108 36598800
36598802 ite 2 16598800 36598801 36597200
36598803 write 3 20000000 36598801 105
36598804 ite 3 16598800 36598803 36597202 ; 0x101C4(~11): sd t0,-8(s0)
36599200 ite 2 16599200 100 36598000 ; 0x101C8(~12): addi t0,zero,0
36599600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36599601 add 2 102 36599600
36599602 ite 2 16599600 36599601 36596802 ; 0x101CC(~12): addi sp,sp,-8
36600000 ite 2 16600000 102 36598802
36600001 write 3 20000000 102 105
36600002 ite 3 16600000 36600001 36598804 ; 0x101D0(~12): sd t0,0(sp)
36600400 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36600401 add 2 108 36600400
36600402 ite 2 16600400 36600401 36600000
36600403 read 2 20000000 36600401
36600404 ite 2 16600400 36600403 36599200 ; 0x101D4(~12): ld t0,-8(s0)
36600800 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36600801 add 2 102 36600800
36600802 ite 2 16600800 36600801 36599602 ; 0x101D8(~12): addi sp,sp,-8
36601200 ite 2 16601200 102 36600402
36601201 write 3 20000000 102 105
36601202 ite 3 16601200 36601201 36600002 ; 0x101DC(~12): sd t0,0(sp)
36601600 constd 2 1 ; 0x1
36601601 ite 2 16601600 36601600 36600404 ; 0x101E0(~12): addi t0,zero,1
36602000 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36602001 add 2 102 36602000
36602002 ite 2 16602000 36602001 36600802 ; 0x101E4(~12): addi sp,sp,-8
36602400 ite 2 16602400 102 36601200
36602401 write 3 20000000 102 105
36602402 ite 3 16602400 36602401 36601202 ; 0x101E8(~12): sd t0,0(sp)
36602800 constd 2 66032 ; 0x101F0
36602801 ite 2 16602800 36602800 36597601 ; 0x101EC(~12): jal ra,-99
36603200 ite 2 16603200 100 36598400 ; 0x101F0(~12): addi a0,zero,0
36603600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36603601 add 2 108 36603600
36603602 ite 2 16603600 36603601 36602400
36603603 read 2 20000000 36603601
36603604 ite 2 16603600 36603603 36601601 ; 0x101F4(~14): ld t0,-8(s0)
36604000 ite 2 16604000 105 36603602
36604001 read 2 20000000 105
36604002 ite 2 16604000 36604001 36603604 ; 0x101F8(~14): ld t0,0(t0)
36604400 constd 2 49 ; 0x31
36604401 ite 2 16604400 36604400 36588001 ; 0x101FC(~14): addi t1,zero,49
36604800 sub 2 106 105
36604801 ite 2 16604800 36604800 36604002 ; 0x10200(~14): sub t0,t1,t0
36605200 ult 1 100 105
36605201 uext 2 36605200 63
36605202 ite 2 16605200 36605201 36604801 ; 0x10204(~14): sltu t0,zero,t0
36605600 constd 2 -8 ; 0xFFFFFFFFFFFFFFF8
36605601 add 2 102 36605600
36605602 ite 2 16605600 36605601 36602002 ; 0x10208(~14): addi sp,sp,-8
36606000 ite 2 16606000 102 36604000
36606001 write 3 20000000 102 105
36606002 ite 3 16606000 36606001 36602402 ; 0x1020C(~14): sd t0,0(sp)
36606400 constd 2 66068 ; 0x10214
36606401 ite 2 16606400 36606400 36602801 ; 0x10210(~14): jal ra,-54
36606800 ite 2 16606800 110 36605202 ; 0x10214(~14): addi t0,a0,0
36607200 ite 2 16607200 100 36603200 ; 0x10218(~14): addi a0,zero,0
36607600 ite 2 16607600 105 36607200 ; 0x1021C(~14): addi a0,t0,0
36608400 ite 2 16608400 108 36605602 ; 0x10224(~17): addi sp,s0,0
36608800 ite 2 16608800 102 36606000
36608801 read 2 20000000 102
36608802 ite 2 16608800 36608801 36595600 ; 0x10228(~17): ld s0,0(sp)
36609200 constd 2 8 ; 0x8
36609201 add 2 102 36609200
36609202 ite 2 16609200 36609201 36608400 ; 0x1022C(~17): addi sp,sp,8
36609600 ite 2 16609600 102 36608800
36609601 read 2 20000000 102
36609602 ite 2 16609600 36609601 36606401 ; 0x10230(~17): ld ra,0(sp)
36610000 constd 2 8 ; 0x8
36610001 add 2 102 36610000
36610002 ite 2 16610000 36610001 36609202 ; 0x10234(~17): addi sp,sp,8

; syscalls

40000000 constd 2 93 ; SYSCALL_EXIT
40000001 constd 2 63 ; SYSCALL_READ
40000002 constd 2 64 ; SYSCALL_WRITE
40000003 constd 2 56 ; SYSCALL_OPENAT
40000004 constd 2 214 ; SYSCALL_BRK

40000010 eq 1 117 40000000 ; $a7 == SYSCALL_EXIT
40000011 eq 1 117 40000001 ; $a7 == SYSCALL_READ
40000012 eq 1 117 40000002 ; $a7 == SYSCALL_WRITE
40000013 eq 1 117 40000003 ; $a7 == SYSCALL_OPENAT
40000014 eq 1 117 40000004 ; $a7 == SYSCALL_BRK

40000020 not 1 40000010 ; $a7 != SYSCALL_EXIT
40000021 ite 1 40000011 10 40000020 ; ... and $a7 != SYSCALL_READ
40000022 ite 1 40000012 10 40000021 ; ... and $a7 != SYSCALL_WRITE
40000023 ite 1 40000013 10 40000022 ; ... and $a7 != SYSCALL_OPENAT
40000024 ite 1 40000014 10 40000023 ; ... and $a7 != SYSCALL_BRK (invalid syscall id in $a7 detected)

40000030 and 1 36583600 40000024 ; ecall is active for invalid syscall id
40000031 bad 40000030 ; ecall invalid syscall id

40001000 and 1 36583600 40000010 ; exit ecall is active
40001002 neq 1 110 20 ; $a0 != zero exit code
40001003 and 1 40001000 40001002 ; exit ecall is active with non-zero exit code
40001004 bad 40001003 ; non-zero exit code
40001050 ite 1 60 40000010 40001000 ; stay in kernel mode indefinitely if exit ecall is active

40001100 and 1 36583600 40000011 ; read ecall is active
40001101 ite 2 40001100 111 36609600 ; $a1 is start address of write buffer for checking address validity
40001102 dec 2 112 ; $a2 - 1
40001103 not 2 27 ; not 7
40001104 and 2 40001102 40001103 ; reset 3 LSBs of $a2 - 1
40001105 add 2 111 40001104 ; $a1 + (($a2 - 1) / 8) * 8
40001106 ugt 1 112 20 ; $a2 > 0
40001107 ite 2 40001106 40001105 111 ; $a1 + (($a2 - 1) / 8) * 8 if $a2 > 0, and $a1 otherwise
40001108 ite 2 40001100 40001107 30 ; $a1 + (($a2 - 1) / 8) * 8 is end address of write buffer for checking address validity
40001150 ite 1 40001100 11 40001050 ; go into kernel mode if read ecall is active
40001151 ite 2 40001100 20 36607600 ; set $a0 = 0 bytes if read ecall is active
40001160 sub 2 112 110 ; $a2 - $a0
40001161 ugte 1 40001160 28 ; $a2 - $a0 >= 8 bytes
40001162 ite 2 40001161 28 40001160 ; read 8 bytes if $a2 - $a0 >= 8 bytes, or else $a2 - $a0 bytes
40001170 eq 1 40001162 22 ; increment == 2
40001171 ite 2 40001170 92 91 ; unsigned-extended 2-byte input if increment == 2, or else unsigned-extended 1-byte input
40001172 eq 1 40001162 23 ; increment == 3
40001173 ite 2 40001172 93 40001171 ; unsigned-extended 3-byte input if increment == 3
40001174 eq 1 40001162 24 ; increment == 4
40001175 ite 2 40001174 94 40001173 ; unsigned-extended 4-byte input if increment == 4
40001176 eq 1 40001162 25 ; increment == 5
40001177 ite 2 40001176 95 40001175 ; unsigned-extended 5-byte input if increment == 5
40001178 eq 1 40001162 26 ; increment == 6
40001179 ite 2 40001178 96 40001177 ; unsigned-extended 6-byte input if increment == 6
40001180 eq 1 40001162 27 ; increment == 7
40001181 ite 2 40001180 97 40001179 ; unsigned-extended 7-byte input if increment == 7
40001182 eq 1 40001162 28 ; increment == 8
40001183 ite 2 40001182 98 40001181 ; 8-byte input if increment == 8
40001184 add 2 111 110 ; $a1 + $a0
40001185 write 3 20000000 40001184 40001183 ; memory[$a1 + $a0] = input
40001190 ult 1 110 112 ; $a0 < $a2
40001191 and 1 40000011 40001190 ; $a7 == SYSCALL_READ and $a0 < $a2
40001192 and 1 60 40001191 ; read ecall is in kernel mode and not done yet
40001193 ugt 1 40001162 20 ; increment > 0
40001194 and 1 40001192 40001193 ; read ecall is in kernel mode and not done yet and increment > 0
40001195 ite 3 40001194 40001185 36606002 ; set memory[$a1 + $a0] = input if read ecall is in kernel mode and not done yet and increment > 0
40001196 add 2 110 40001162 ; $a0 + increment
40001197 ite 2 40001192 40001196 40001151 ; set $a0 = $a0 + increment if read ecall is in kernel mode and not done yet
40001198 ite 1 40001192 11 40001150 ; stay in kernel mode if read ecall is in kernel mode and not done yet

40001200 and 1 36583600 40000012 ; write ecall is active
40001201 ite 2 40001200 111 40001101 ; $a1 is start address of read buffer for checking address validity
40001202 dec 2 112 ; $a2 - 1
40001203 not 2 27 ; not 7
40001204 and 2 40001202 40001203 ; reset 3 LSBs of $a2 - 1
40001205 add 2 111 40001204 ; $a1 + (($a2 - 1) / 8) * 8
40001206 ugt 1 112 20 ; $a2 > 0
40001207 ite 2 40001206 40001205 111 ; $a1 + (($a2 - 1) / 8) * 8 if $a2 > 0, and $a1 otherwise
40001208 ite 2 40001200 40001207 40001108 ; $a1 + (($a2 - 1) / 8) * 8 is end address of read buffer for checking address validity
40001250 ite 2 40001200 112 40001197 ; set $a0 = $a2 if write ecall is active

40001300 and 1 36583600 40000013 ; openat ecall is active
40001301 ite 2 40001300 111 40001201 ; $a1 is start address of filename for checking address validity
40001350 state 2 fd-bump
40001351 init 2 40001350 21 ; initial fd-bump is 1 (file descriptor bump pointer)
40001352 inc 2 40001350
40001353 ite 2 40001300 40001352 40001350 ; fd-bump + 1 if openat ecall is active
40001354 next 2 40001350 40001353 ; increment fd-bump if openat ecall is active
40001355 ite 2 40001300 40001352 40001250 ; set $a0 = fd-bump + 1 if openat ecall is active

40001400 and 1 36583600 40000014 ; brk ecall is active
40001450 state 2 brk
40001451 init 2 40001450 31 ; initial program break is end of data segment
40001452 ulte 1 40001450 110 ; brk <= $a0
40001453 ult 1 110 102 ; $a0 < $sp
40001454 and 1 40001452 40001453 ; brk <= $a0 < $sp
40001455 and 2 110 27 ; reset all but 3 LSBs of $a0
40001456 eq 1 40001455 20 ; 3 LSBs of $a0 == 0 ($a0 is word-aligned)
40001457 and 1 40001454 40001456 ; brk <= $a0 < $sp and $a0 is word-aligned ($a0 is valid)
40001458 and 1 40001400 40001457 ; brk ecall is active and $a0 is valid
40001459 ite 2 40001458 110 40001450 ; brk = $a0 if brk ecall is active and $a0 is valid
40001460 next 2 40001450 40001459 ; set brk = $a0 if brk ecall is active and $a0 is valid
40001461 not 1 40001457 ; $a0 is invalid
40001462 and 1 40001400 40001461 ; brk ecall is active and $a0 is invalid
40001463 ite 2 40001462 40001450 40001355 ; set $a0 = brk if brk ecall is active and $a0 is invalid

40001500 next 1 60 40001198 ; update kernel-mode flag

; control flow

56553600 next 1 16553600 10 ; ->65536[0x10000](~1)
; 65536[0x10000](~1)
56554000 next 1 16554000 16553600 ; ->65540[0x10004](~1)
; 65540[0x10004](~1)
56554400 next 1 16554400 16554000 ; ->65544[0x10008](~1)
; 65544[0x10008](~1)
56554800 next 1 16554800 16554400 ; ->65548[0x1000C](~1)
; 65548[0x1000C](~1)
56555200 next 1 16555200 16554800 ; ->65552[0x10010](~1)
; 65552[0x10010](~1)
56555600 next 1 16555600 16555200 ; ->65556[0x10014](~1)
56556000 state 1 ; kernel-mode pc flag of ecall 65556[0x10014](~1)
56556001 init 1 56556000 10 ; ecall is initially inactive
56556002 ite 1 56556000 60 16555600 ; activate ecall and keep active while in kernel mode
56556003 next 1 56556000 56556002 ; keep ecall active while in kernel mode
56556004 and 1 56556000 62 ; ecall is active but not in kernel mode anymore
56556005 next 1 16556000 56556004 ; ->65560[0x10018](~1)
; 65560[0x10018](~1)
56556400 next 1 16556400 16556000 ; ->65564[0x1001C](~1)
; 65564[0x1001C](~1)
56556800 next 1 16556800 16556400 ; ->65568[0x10020](~1)
; 65568[0x10020](~1)
56557200 next 1 16557200 16556800 ; ->65572[0x10024](~1)
; 65572[0x10024](~1)
56557600 next 1 16557600 16557200 ; ->65576[0x10028](~1)
; 65576[0x10028](~1)
56558000 next 1 16558000 16557600 ; ->65580[0x1002C](~1)
56558400 state 1 ; kernel-mode pc flag of ecall 65580[0x1002C](~1)
56558401 init 1 56558400 10 ; ecall is initially inactive
56558402 ite 1 56558400 60 16558000 ; activate ecall and keep active while in kernel mode
56558403 next 1 56558400 56558402 ; keep ecall active while in kernel mode
56558404 and 1 56558400 62 ; ecall is active but not in kernel mode anymore
56558405 next 1 16558400 56558404 ; ->65584[0x10030](~1)
; 65584[0x10030](~1)
56558800 next 1 16558800 16558400 ; ->65588[0x10034](~1)
; 65588[0x10034](~1)
56559200 next 1 16559200 16558800 ; ->65592[0x10038](~1)
; 65592[0x10038](~1)
56559600 next 1 16559600 16559200 ; ->65596[0x1003C](~1)
; 65596[0x1003C](~1)
56560000 next 1 16560000 16559600 ; ->65600[0x10040](~1)
; 65600[0x10040](~1)
56560400 next 1 16560400 16560000 ; ->65604[0x10044](~1)
56560800 not 2 21 ; jalr 66104[0x10238](~17)
56560801 and 2 101 56560800
56560802 eq 1 56560801 36560400
56560803 and 1 16610400 56560802
56560804 next 1 16560800 56560803 ; ->65608[0x10048](~1)
; 65608[0x10048](~1)
56561200 next 1 16561200 16560800 ; ->65612[0x1004C](~1)
; 65612[0x1004C](~1)
56561600 next 1 16561600 16561200 ; ->65616[0x10050](~1)
; 65616[0x10050](~1)
56562000 next 1 16562000 16561600 ; ->65620[0x10054](~1)
; 65620[0x10054](~1)
56562400 next 1 16562400 16562000 ; ->65624[0x10058](~1)
; 65624[0x10058](~1)
56562800 next 1 16562800 16562400 ; ->65628[0x1005C](~1)
; jal 66028[0x101EC](~12)
56563200 state 1 ; kernel-mode pc flag of ecall 65628[0x1005C](~1)
56563201 init 1 56563200 10 ; ecall is initially inactive
56563202 ite 1 56563200 60 16562800 ; activate ecall and keep active while in kernel mode
56563203 next 1 56563200 56563202 ; keep ecall active while in kernel mode
56563204 and 1 56563200 62 ; ecall is active but not in kernel mode anymore
56563205 ite 1 56563204 11 16602800
56563206 next 1 16563200 56563205 ; ->65632[0x10060](~1)
; 65632[0x10060](~1)
56563600 next 1 16563600 16563200 ; ->65636[0x10064](~1)
; 65636[0x10064](~1)
56564000 next 1 16564000 16563600 ; ->65640[0x10068](~1)
; 65640[0x10068](~1)
56564400 next 1 16564400 16564000 ; ->65644[0x1006C](~1)
; 65644[0x1006C](~1)
56564800 next 1 16564800 16564400 ; ->65648[0x10070](~1)
; 65648[0x10070](~1)
56565200 next 1 16565200 16564800 ; ->65652[0x10074](~1)
; 65652[0x10074](~1)
56565600 next 1 16565600 16565200 ; ->65656[0x10078](~1)
; 65656[0x10078](~1)
56566000 next 1 16566000 16565600 ; ->65660[0x1007C](~1)
56566400 state 1 ; kernel-mode pc flag of ecall 65660[0x1007C](~1)
56566401 init 1 56566400 10 ; ecall is initially inactive
56566402 ite 1 56566400 60 16566000 ; activate ecall and keep active while in kernel mode
56566403 next 1 56566400 56566402 ; keep ecall active while in kernel mode
56566404 and 1 56566400 62 ; ecall is active but not in kernel mode anymore
56566405 next 1 16566400 56566404 ; ->65664[0x10080](~1)
56566800 next 1 16566800 10 ; ->65668[0x10084](~1) (unreachable)
; 65668[0x10084](~1)
56567200 next 1 16567200 16566800 ; ->65672[0x10088](~1)
; 65672[0x10088](~1)
56567600 next 1 16567600 16567200 ; ->65676[0x1008C](~1)
; 65676[0x1008C](~1)
56568000 next 1 16568000 16567600 ; ->65680[0x10090](~1)
; 65680[0x10090](~1)
56568400 next 1 16568400 16568000 ; ->65684[0x10094](~1)
; 65684[0x10094](~1)
56568800 next 1 16568800 16568400 ; ->65688[0x10098](~1)
; 65688[0x10098](~1)
56569200 next 1 16569200 16568800 ; ->65692[0x1009C](~1)
; 65692[0x1009C](~1)
56569600 next 1 16569600 16569200 ; ->65696[0x100A0](~1)
56570000 state 1 ; kernel-mode pc flag of ecall 65696[0x100A0](~1)
56570001 init 1 56570000 10 ; ecall is initially inactive
56570002 ite 1 56570000 60 16569600 ; activate ecall and keep active while in kernel mode
56570003 next 1 56570000 56570002 ; keep ecall active while in kernel mode
56570004 and 1 56570000 62 ; ecall is active but not in kernel mode anymore
56570005 next 1 16570000 56570004 ; ->65700[0x100A4](~1)
56570400 next 1 16570400 10 ; ->65704[0x100A8](~1) (unreachable)
; 65704[0x100A8](~1)
56570800 next 1 16570800 16570400 ; ->65708[0x100AC](~1)
; 65708[0x100AC](~1)
56571200 next 1 16571200 16570800 ; ->65712[0x100B0](~1)
; 65712[0x100B0](~1)
56571600 next 1 16571600 16571200 ; ->65716[0x100B4](~1)
; 65716[0x100B4](~1)
56572000 next 1 16572000 16571600 ; ->65720[0x100B8](~1)
; 65720[0x100B8](~1)
56572400 next 1 16572400 16572000 ; ->65724[0x100BC](~1)
; 65724[0x100BC](~1)
56572800 next 1 16572800 16572400 ; ->65728[0x100C0](~1)
; 65728[0x100C0](~1)
56573200 next 1 16573200 16572800 ; ->65732[0x100C4](~1)
; 65732[0x100C4](~1)
56573600 next 1 16573600 16573200 ; ->65736[0x100C8](~1)
56574000 state 1 ; kernel-mode pc flag of ecall 65736[0x100C8](~1)
56574001 init 1 56574000 10 ; ecall is initially inactive
56574002 ite 1 56574000 60 16573600 ; activate ecall and keep active while in kernel mode
56574003 next 1 56574000 56574002 ; keep ecall active while in kernel mode
56574004 and 1 56574000 62 ; ecall is active but not in kernel mode anymore
56574005 next 1 16574000 56574004 ; ->65740[0x100CC](~1)
; jal 65976[0x101B8](~11)
56574400 next 1 16574400 16597600 ; ->65744[0x100D0](~1)
; 65744[0x100D0](~1)
56574800 next 1 16574800 16574400 ; ->65748[0x100D4](~1)
; 65748[0x100D4](~1)
56575200 next 1 16575200 16574800 ; ->65752[0x100D8](~1)
; 65752[0x100D8](~1)
56575600 next 1 16575600 16575200 ; ->65756[0x100DC](~1)
; 65756[0x100DC](~1)
56576000 next 1 16576000 16575600 ; ->65760[0x100E0](~1)
; 65760[0x100E0](~1)
56576400 next 1 16576400 16576000 ; ->65764[0x100E4](~1)
; 65764[0x100E4](~1)
56576800 next 1 16576800 16576400 ; ->65768[0x100E8](~1)
; 65768[0x100E8](~1)
56577200 next 1 16577200 16576800 ; ->65772[0x100EC](~1)
; 65772[0x100EC](~1)
56577600 next 1 16577600 16577200 ; ->65776[0x100F0](~1)
; 65776[0x100F0](~1)
56578000 next 1 16578000 16577600 ; ->65780[0x100F4](~1)
56578400 state 1 ; kernel-mode pc flag of ecall 65780[0x100F4](~1)
56578401 init 1 56578400 10 ; ecall is initially inactive
56578402 ite 1 56578400 60 16578000 ; activate ecall and keep active while in kernel mode
56578403 next 1 56578400 56578402 ; keep ecall active while in kernel mode
56578404 and 1 56578400 62 ; ecall is active but not in kernel mode anymore
56578405 next 1 16578400 56578404 ; ->65784[0x100F8](~1)
56578800 and 1 16578400 36578401 ; beq 65784[0x100F8](~1)
56578801 next 1 16578800 56578800 ; ->65788[0x100FC](~1)
56579200 and 1 16578800 36578801 ; beq 65788[0x100FC](~1)
56579201 and 1 16578400 36578400 ; beq 65784[0x100F8](~1)
56579202 ite 1 56579201 11 56579200
56579203 next 1 16579200 56579202 ; ->65792[0x10100](~1)
56579600 and 1 16579200 36579201 ; beq 65792[0x10100](~1)
56579601 next 1 16579600 56579600 ; ->65796[0x10104](~1)
; 65796[0x10104](~1)
56580000 next 1 16580000 16579600 ; ->65800[0x10108](~1)
56580400 and 1 16580000 36580001 ; beq 65800[0x10108](~1)
56580401 and 1 16579200 36579200 ; beq 65792[0x10100](~1)
56580402 ite 1 56580401 11 56580400
56580403 and 1 16578800 36578800 ; beq 65788[0x100FC](~1)
56580404 ite 1 56580403 11 56580402
56580405 next 1 16580400 56580404 ; ->65804[0x1010C](~1)
; 65804[0x1010C](~1)
56580800 next 1 16580800 16580400 ; ->65808[0x10110](~1)
; 65808[0x10110](~1)
56581200 and 1 16580000 36580000 ; beq 65800[0x10108](~1)
56581201 ite 1 56581200 11 16580800
56581202 next 1 16581200 56581201 ; ->65812[0x10114](~1)
56581600 next 1 16581600 10 ; ->65816[0x10118](~1) (unreachable)
; 65816[0x10118](~1)
56582000 next 1 16582000 16581600 ; ->65820[0x1011C](~1)
; 65820[0x1011C](~1)
56582400 next 1 16582400 16582000 ; ->65824[0x10120](~1)
; 65824[0x10120](~1)
56582800 next 1 16582800 16582400 ; ->65828[0x10124](~1)
; 65828[0x10124](~1)
56583200 next 1 16583200 16582800 ; ->65832[0x10128](~1)
; 65832[0x10128](~1)
56583600 next 1 16583600 16583200 ; ->65836[0x1012C](~1)
56584000 state 1 ; kernel-mode pc flag of ecall 65836[0x1012C](~1)
56584001 init 1 56584000 10 ; ecall is initially inactive
56584002 ite 1 56584000 60 16583600 ; activate ecall and keep active while in kernel mode
56584003 next 1 56584000 56584002 ; keep ecall active while in kernel mode
56584004 and 1 56584000 62 ; ecall is active but not in kernel mode anymore
56584005 next 1 16584000 56584004 ; ->65840[0x10130](~1)
; 65840[0x10130](~1)
56584400 next 1 16584400 16584000 ; ->65844[0x10134](~1)
; jal 66064[0x10210](~14)
56584800 next 1 16584800 16606400 ; ->65848[0x10138](~2)
; 65848[0x10138](~2)
56585200 next 1 16585200 16584800 ; ->65852[0x1013C](~2)
; 65852[0x1013C](~2)
56585600 next 1 16585600 16585200 ; ->65856[0x10140](~2)
; 65856[0x10140](~2)
56586000 next 1 16586000 16585600 ; ->65860[0x10144](~2)
; 65860[0x10144](~2)
56586400 next 1 16586400 16586000 ; ->65864[0x10148](~2)
; 65864[0x10148](~2)
56586800 next 1 16586800 16586400 ; ->65868[0x1014C](~2)
; 65868[0x1014C](~2)
56587200 next 1 16587200 16586800 ; ->65872[0x10150](~2)
; 65872[0x10150](~2)
56587600 next 1 16587600 16587200 ; ->65876[0x10154](~2)
; 65876[0x10154](~2)
56588000 next 1 16588000 16587600 ; ->65880[0x10158](~2)
; 65880[0x10158](~2)
56588400 next 1 16588400 16588000 ; ->65884[0x1015C](~2)
; 65884[0x1015C](~2)
56588800 next 1 16588800 16588400 ; ->65888[0x10160](~2)
56589200 and 1 16588800 36588801 ; beq 65888[0x10160](~2)
56589201 next 1 16589200 56589200 ; ->65892[0x10164](~3)
; 65892[0x10164](~3)
56589600 next 1 16589600 16589200 ; ->65896[0x10168](~3)
; 65896[0x10168](~3)
56590000 next 1 16590000 16589600 ; ->65900[0x1016C](~3)
56590400 and 1 16588800 36588800 ; beq 65888[0x10160](~2)
56590401 next 1 16590400 56590400 ; ->65904[0x10170](~5)
; 65904[0x10170](~5)
56590800 next 1 16590800 16590400 ; ->65908[0x10174](~5)
; 65908[0x10174](~5)
56591200 next 1 16591200 16590800 ; ->65912[0x10178](~5)
; jal 65912[0x10178](~5)
; jal 65900[0x1016C](~3)
56591600 ite 1 16590000 11 16591200
56591601 next 1 16591600 56591600 ; ->65916[0x1017C](~8)
; 65916[0x1017C](~8)
56592000 next 1 16592000 16591600 ; ->65920[0x10180](~8)
; 65920[0x10180](~8)
56592400 next 1 16592400 16592000 ; ->65924[0x10184](~8)
; 65924[0x10184](~8)
56592800 next 1 16592800 16592400 ; ->65928[0x10188](~8)
; 65928[0x10188](~8)
56593200 next 1 16593200 16592800 ; ->65932[0x1018C](~8)
; 65932[0x1018C](~8)
56593600 next 1 16593600 16593200 ; ->65936[0x10190](~8)
; jal 65604[0x10044](~1)
56594000 next 1 16594000 16560400 ; ->65940[0x10194](~11)
; 65940[0x10194](~11)
56594400 next 1 16594400 16594000 ; ->65944[0x10198](~11)
; 65944[0x10198](~11)
56594800 next 1 16594800 16594400 ; ->65948[0x1019C](~11)
; 65948[0x1019C](~11)
56595200 next 1 16595200 16594800 ; ->65952[0x101A0](~11)
; 65952[0x101A0](~11)
56595600 next 1 16595600 16595200 ; ->65956[0x101A4](~11)
; 65956[0x101A4](~11)
56596000 next 1 16596000 16595600 ; ->65960[0x101A8](~11)
; 65960[0x101A8](~11)
56596400 next 1 16596400 16596000 ; ->65964[0x101AC](~11)
; 65964[0x101AC](~11)
56596800 next 1 16596800 16596400 ; ->65968[0x101B0](~11)
; 65968[0x101B0](~11)
56597200 next 1 16597200 16596800 ; ->65972[0x101B4](~11)
; 65972[0x101B4](~11)
56597600 next 1 16597600 16597200 ; ->65976[0x101B8](~11)
56598000 not 2 21 ; jalr 65812[0x10114](~1)
56598001 and 2 101 56598000
56598002 eq 1 56598001 36597600
56598003 and 1 16581200 56598002
56598004 next 1 16598000 56598003 ; ->65980[0x101BC](~11)
; 65980[0x101BC](~11)
56598400 next 1 16598400 16598000 ; ->65984[0x101C0](~11)
; 65984[0x101C0](~11)
56598800 next 1 16598800 16598400 ; ->65988[0x101C4](~11)
; 65988[0x101C4](~11)
56599200 next 1 16599200 16598800 ; ->65992[0x101C8](~12)
; 65992[0x101C8](~12)
56599600 next 1 16599600 16599200 ; ->65996[0x101CC](~12)
; 65996[0x101CC](~12)
56600000 next 1 16600000 16599600 ; ->66000[0x101D0](~12)
; 66000[0x101D0](~12)
56600400 next 1 16600400 16600000 ; ->66004[0x101D4](~12)
; 66004[0x101D4](~12)
56600800 next 1 16600800 16600400 ; ->66008[0x101D8](~12)
; 66008[0x101D8](~12)
56601200 next 1 16601200 16600800 ; ->66012[0x101DC](~12)
; 66012[0x101DC](~12)
56601600 next 1 16601600 16601200 ; ->66016[0x101E0](~12)
; 66016[0x101E0](~12)
56602000 next 1 16602000 16601600 ; ->66020[0x101E4](~12)
; 66020[0x101E4](~12)
56602400 next 1 16602400 16602000 ; ->66024[0x101E8](~12)
; 66024[0x101E8](~12)
56602800 next 1 16602800 16602400 ; ->66028[0x101EC](~12)
56603200 not 2 21 ; jalr 65664[0x10080](~1)
56603201 and 2 101 56603200
56603202 eq 1 56603201 36602800
56603203 and 1 16566400 56603202
56603204 next 1 16603200 56603203 ; ->66032[0x101F0](~12)
; 66032[0x101F0](~12)
56603600 next 1 16603600 16603200 ; ->66036[0x101F4](~14)
; 66036[0x101F4](~14)
56604000 next 1 16604000 16603600 ; ->66040[0x101F8](~14)
; 66040[0x101F8](~14)
56604400 next 1 16604400 16604000 ; ->66044[0x101FC](~14)
; 66044[0x101FC](~14)
56604800 next 1 16604800 16604400 ; ->66048[0x10200](~14)
; 66048[0x10200](~14)
56605200 next 1 16605200 16604800 ; ->66052[0x10204](~14)
; 66052[0x10204](~14)
56605600 next 1 16605600 16605200 ; ->66056[0x10208](~14)
; 66056[0x10208](~14)
56606000 next 1 16606000 16605600 ; ->66060[0x1020C](~14)
; 66060[0x1020C](~14)
56606400 next 1 16606400 16606000 ; ->66064[0x10210](~14)
56606800 not 2 21 ; jalr 65936[0x10190](~8)
56606801 and 2 101 56606800
56606802 eq 1 56606801 36606400
56606803 and 1 16593600 56606802
56606804 next 1 16606800 56606803 ; ->66068[0x10214](~14)
; 66068[0x10214](~14)
56607200 next 1 16607200 16606800 ; ->66072[0x10218](~14)
; 66072[0x10218](~14)
56607600 next 1 16607600 16607200 ; ->66076[0x1021C](~14)
; 66076[0x1021C](~14)
56608000 next 1 16608000 16607600 ; ->66080[0x10220](~14)
; jal 66080[0x10220](~14)
56608400 next 1 16608400 16608000 ; ->66084[0x10224](~17)
; 66084[0x10224](~17)
56608800 next 1 16608800 16608400 ; ->66088[0x10228](~17)
; 66088[0x10228](~17)
56609200 next 1 16609200 16608800 ; ->66092[0x1022C](~17)
; 66092[0x1022C](~17)
56609600 next 1 16609600 16609200 ; ->66096[0x10230](~17)
; 66096[0x10230](~17)
56610000 next 1 16610000 16609600 ; ->66100[0x10234](~17)
; 66100[0x10234](~17)
56610400 next 1 16610400 16610000 ; ->66104[0x10238](~17)
56610800 next 1 16610800 10 ; ->66108[0x1023C](~17) (unreachable)

; updating registers

60000001 next 2 101 36609602 ra ; register $1
60000002 next 2 102 36610002 sp ; register $2
60000003 next 2 103 36554400 gp ; register $3
60000004 next 2 104 104 tp ; register $4
60000005 next 2 105 36606800 t0 ; register $5
60000006 next 2 106 36604401 t1 ; register $6
60000007 next 2 107 107 t2 ; register $7
60000008 next 2 108 36608802 s0 ; register $8
60000009 next 2 109 109 s1 ; register $9
60000010 next 2 110 40001463 a0 ; register $10
60000011 next 2 111 36581602 a1 ; register $11
60000012 next 2 112 36571202 a2 ; register $12
60000013 next 2 113 36570402 a3 ; register $13
60000014 next 2 114 114 a4 ; register $14
60000015 next 2 115 115 a5 ; register $15
60000016 next 2 116 116 a6 ; register $16
60000017 next 2 117 36583201 a7 ; register $17
60000018 next 2 118 118 s2 ; register $18
60000019 next 2 119 119 s3 ; register $19
60000020 next 2 120 120 s4 ; register $20
60000021 next 2 121 121 s5 ; register $21
60000022 next 2 122 122 s6 ; register $22
60000023 next 2 123 123 s7 ; register $23
60000024 next 2 124 124 s8 ; register $24
60000025 next 2 125 125 s9 ; register $25
60000026 next 2 126 126 s10 ; register $26
60000027 next 2 127 127 s11 ; register $27
60000028 next 2 128 128 t3 ; register $28
60000029 next 2 129 129 t4 ; register $29
60000030 next 2 130 130 t5 ; register $30
60000031 next 2 131 131 t6 ; register $31

; updating memory

70000000 next 3 20000000 40001195 memory

; checking division and remainder by zero

80000000 eq 1 21 20
80000001 bad 80000000 ; division by zero

80000002 eq 1 36576000 20
80000003 bad 80000002 ; remainder by zero

; checking address validity

; at start of memory block

90000000 ult 1 40001301 30
90000001 bad 90000000 ; memory access below lower bound
90000002 ugte 1 40001301 50
90000003 bad 90000002 ; memory access at or above upper bound
90000004 and 2 40001301 27
90000005 neq 1 90000004 20
90000006 bad 90000005 ; word-unaligned memory access

; at end of memory block

90000007 ult 1 40001208 30
90000008 bad 90000007 ; memory access below lower bound
90000009 ugte 1 40001208 50
90000010 bad 90000009 ; memory access at or above upper bound
90000011 and 2 40001208 27
90000012 neq 1 90000011 20
90000013 bad 90000012 ; word-unaligned memory access

; end of BTOR2 example.btor2
