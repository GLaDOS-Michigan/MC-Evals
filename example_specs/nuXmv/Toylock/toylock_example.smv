MODULE node
VAR
    id : {0, 1};
    held : boolean;
    epoch : {0, 1};

MODULE main
VAR
    n0 : node;
    n1 : node;
    transfer : array 0..1 of array 0..1 of boolean;
    locked   : array 0..1 of array 0..1 of boolean;

    -- non-deterministics
    action      : {grant, accept, stutter};
    actor       : {0, 1};
    grant_dst   : {0, 1};
    accept_ep   : {0, 1};
FROZENVAR
    first_node  : {0, 1};
    first_epoch : {1};

DEFINE
    TypeOK := n0.id = 0 & n1.id = 1;
    constants_next := 
        next(n0.id) = n0.id
        & next(n1.id) = n1.id;

    n0_stutter := 
        next(n0.held) = n0.held & next(n0.epoch) = n0.epoch;
    n1_stutter := 
        next(n1.held) = n1.held & next(n1.epoch) = n1.epoch;

    stutter_step :=
        constants_next
        & n0_stutter
        & n1_stutter
        & next(transfer[0][0]) = transfer[0][0]
        & next(transfer[0][1]) = transfer[0][1]
        & next(transfer[1][0]) = transfer[1][0]
        & next(transfer[1][1]) = transfer[1][1]
        & next(locked[0][0]) = locked[0][0]
        & next(locked[0][1]) = locked[0][1]
        & next(locked[1][0]) = locked[1][0]
        & next(locked[1][1]) = locked[1][1];

    grant_step :=
        constants_next
        & action = grant
        & case actor=0:n0.held;  actor=1:n1.held;
        esac
        & case 
            actor=0 :
                n1_stutter
                & next(n0.held) = (n0.epoch=1 ? TRUE : FALSE)
                & next(n0.epoch) = n0.epoch
                & next(transfer[0][0]) = (grant_dst=0 & n0.epoch+1=0 ? TRUE : transfer[0][0])
                & next(transfer[0][1]) = (grant_dst=0 & n0.epoch+1=1 ? TRUE : transfer[0][1])
                & next(transfer[1][0]) = (grant_dst=1 & n0.epoch+1=0 ? TRUE : transfer[1][0])
                & next(transfer[1][1]) = (grant_dst=1 & n0.epoch+1=1 ? TRUE : transfer[1][1])
                & next(locked[0][0]) = locked[0][0]
                & next(locked[0][1]) = locked[0][1]
                & next(locked[1][0]) = locked[1][0]
                & next(locked[1][1]) = locked[1][1];
            actor=1 :
                n0_stutter
                & next(n1.held) = (n1.epoch=1 ? TRUE : FALSE)
                & next(n1.epoch) = n1.epoch
                & next(transfer[0][0]) = (grant_dst=0 & n1.epoch+1=0 ? TRUE : transfer[0][0])
                & next(transfer[0][1]) = (grant_dst=0 & n1.epoch+1=1 ? TRUE : transfer[0][1])
                & next(transfer[1][0]) = (grant_dst=1 & n1.epoch+1=0 ? TRUE : transfer[1][0])
                & next(transfer[1][1]) = (grant_dst=1 & n1.epoch+1=1 ? TRUE : transfer[1][1])
                & next(locked[0][0]) = locked[0][0]
                & next(locked[0][1]) = locked[0][1]
                & next(locked[1][0]) = locked[1][0]
                & next(locked[1][1]) = locked[1][1];
        esac;

    accept_step :=
        constants_next
        & action = accept
        & case
            actor=0: 
                !n0.held
                & accept_ep > n0.epoch
                & transfer[0][accept_ep];
            actor=1: 
                !n1.held
                & accept_ep > n1.epoch
                & transfer[1][accept_ep];
        esac
        & case 
            actor=0 :
                n1_stutter
                & next(n0.held) = TRUE
                & next(n0.epoch) = accept_ep
                & next(transfer[0][0]) = transfer[0][0]
                & next(transfer[0][1]) = transfer[0][1]
                & next(transfer[1][0]) = transfer[1][0]
                & next(transfer[1][1]) = transfer[1][1]
                & next(locked[0][0]) = (accept_ep=0 ? TRUE : locked[0][0])
                & next(locked[0][1]) = (accept_ep=1 ? TRUE : locked[0][1])
                & next(locked[1][0]) = locked[1][0]
                & next(locked[1][1]) = locked[1][1];
            actor=1 :
                n0_stutter
                & next(n1.held) = TRUE
                & next(n1.epoch) = accept_ep
                & next(transfer[0][0]) = transfer[0][0]
                & next(transfer[0][1]) = transfer[0][1]
                & next(transfer[1][0]) = transfer[1][0]
                & next(transfer[1][1]) = transfer[1][1]
                & next(locked[0][0]) = locked[0][0]
                & next(locked[0][1]) = locked[0][1]
                & next(locked[1][0]) = (accept_ep=0 ? TRUE : locked[1][0])
                & next(locked[1][1]) = (accept_ep=1 ? TRUE : locked[1][1]);
        esac;

ASSIGN
    init(n0.id)     := 0;
    init(n0.held)   := first_node = 0;
    init(n0.epoch)  := first_node = 0 ? first_epoch : 0;
    init(n1.id)     := 1;
    init(n1.held)   := first_node = 1;
    init(n1.epoch)  := first_node = 1 ? first_epoch : 0;
    init(transfer[0][0]) := FALSE;
    init(transfer[0][1]) := FALSE;
    init(transfer[1][0]) := FALSE;
    init(transfer[1][1]) := FALSE;
    init(locked[0][0])   := FALSE;
    init(locked[0][1])   := FALSE;
    init(locked[1][0])   := FALSE;
    init(locked[1][1])   := FALSE;
TRANS
    case
        action=grant   : grant_step;
        action=accept  : accept_step;
        action=stutter : stutter_step;
    esac;

INVARSPEC TypeOK;
INVARSPEC 
    !(n0.held & n1.held);
INVARSPEC 
    (locked[0][0] & locked[0][0] -> n0.id = n0.id)
    & (locked[0][0] & locked[1][0] -> n0.id = n1.id)
    & (locked[1][0] & locked[0][0] -> n1.id = n0.id)
    & (locked[1][0] & locked[1][0] -> n1.id = n1.id)
    & (locked[0][1] & locked[0][1] -> n0.id = n0.id)
    & (locked[0][1] & locked[1][1] -> n0.id = n1.id)
    & (locked[1][1] & locked[0][1] -> n1.id = n0.id)
    & (locked[1][1] & locked[1][1] -> n1.id = n1.id);
